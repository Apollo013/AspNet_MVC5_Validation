@model AspNet_MVC5_Validation.Models.ValidationTestModel
@{
    ViewBag.Title = "Index";
}

<h2>Index</h2>

@using (Html.BeginForm("index","user",FormMethod.Post, new { @class= "form-horizontal" }))
{
    @Html.ValidationSummary(true);

    <div class="form-group">
        @Html.LabelFor(m => m.PhoneNumber, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.TextBoxFor(m => m.PhoneNumber, new { @class = "form-control" })
            @Html.ValidationMessageFor(m => m.PhoneNumber, "", new { @class = "text-danger" })
        </div>
    </div>


    <div class="form-group">
        @Html.LabelFor(m => m.DOB, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.TextBoxFor(m => m.DOB, new { @class = "form-control datecontrol" })
            @Html.ValidationMessageFor(m => m.DOB,"", new {@class="text-danger" })
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" class="btn btn-default" value="OK" />
        </div>
        <input type="button" id="datetest" value="click me"/>
    </div>

    <p id="display"></p>
}

@section scripts{

    <script type="text/javascript">
        (function ($) {

            // Initialise datepicker
            $('.datecontrol').datepicker({ dateFormat: "dd/MM/yyyy" });

            /*--------------------------------------------------------------------------------------------
            The following sets up unobtrusive validation to add/remove the error class
            to the encapsulating 'form-group' of an element when validation fails.
            --------------------------------------------------------------------------------------------*/
            var defaultOptions = {
                validClass: 'has-success',
                errorClass: 'has-error',
                highlight: function (element, errorClass, validClass) {
                    $(element).closest(".form-group")
                        .removeClass(validClass)
                        .addClass('has-error');
                },
                unhighlight: function (element, errorClass, validClass) {
                    $(element).closest(".form-group")
                    .removeClass('has-error')
                    .addClass(validClass);
                }
            };

            $.validator.setDefaults(defaultOptions);

            $.validator.unobtrusive.options = {
                errorClass: defaultOptions.errorClass,
                validClass: defaultOptions.validClass
            };


            /*--------------------------------------------------------------------------------------------
            Phone Number Mask Validation
            --------------------------------------------------------------------------------------------*/
            $.validator.addMethod('phonemaskvalidation', function (value, element, params) {
                var mask = params.mask;
                var len = mask.length;

                // Is required
                if (value === '') {
                    return false;
                }

                // Must have same length
                if (value.length != len) {
                    return false;
                }

                // Must match mask
                for (var i = 0 ; i < len ; i++) {
                    if (mask[i] === 'd' && !$.isNumeric(value[i])) {
                        return false;
                    }
                    if (mask[i] === '-' && value[i] !== '-') {
                        return false;
                    }
                }

                // We're good
                return true;
            }, '');

            $.validator.unobtrusive.adapters.add('phonemaskvalidation', ['mask'], function (options) {
                options.rules['phonemaskvalidation'] = {
                    mask: options.params.mask
                };
                options.messages['phonemaskvalidation'] = options.message;
            });


            /*--------------------------------------------------------------------------------------------
            Date Range Validation
            --------------------------------------------------------------------------------------------*/
            $.validator.addMethod('daterange', function (value, element, params) {                
                // Is required
                if (value === '') {
                    return false;
                }

                var minDate = parseDate(params.mindate);
                var maxDate = parseDate(params.maxdate);
                var date = parseDate(value);

                // Check Range
                return (date >= minDate && date <= maxDate);
            });


            $.validator.unobtrusive.adapters.add('daterange', ['mindate', 'maxdate'], function (options) {
                options.rules['daterange'] = {
                    mindate: options.params.mindate,
                    maxdate: options.params.maxdate
                }
                options.messages['daterange'] = options.message;
            });

            function parseDate(date) {
                var parts = date.split('/');
                return new Date(parts[2], parts[1] - 1, parts[0]);
            }

        })(jQuery);
    </script>    
}

