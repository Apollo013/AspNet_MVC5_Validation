@model AspNet_MVC5_Validation.Models.ValidationTestModel
@{
    ViewBag.Title = "Index";
}

<h2>Index</h2>

@using (Html.BeginForm("index","user",FormMethod.Post, new { @class= "form-horizontal" }))
{
    @Html.ValidationSummary(true);

    <div class="form-group">
        @Html.LabelFor(m => m.PhoneNumber, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.TextBoxFor(m => m.PhoneNumber, new { @class = "form-control" })
            @Html.ValidationMessageFor(m => m.PhoneNumber, "", new { @class = "text-danger" })
        </div>
    </div>


    <div class="form-group">
        @Html.LabelFor(m => m.DOB, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.TextBoxFor(m => m.DOB, new { @class = "form-control datecontrol" })
            @Html.ValidationMessageFor(m => m.DOB,"", new {@class="text-danger" })
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" class="btn btn-default" value="OK" />
        </div>
        <input type="button" id="datetest" value="click me"/>
    </div>

}

@section scripts{

<script type="text/javascript">
    (function ($) {

        // Initialise datepicker
        $('.datecontrol').datepicker({ dateFormat: "dd/MM/yyyy" });

        /*--------------------------------------------------------------------------------------------
        The following sets up unobtrusive validation to add/remove the error class
        to the encapsulating 'form-group' of an element when validation fails.
        --------------------------------------------------------------------------------------------*/
        var defaultOptions = {
            validClass: 'has-success',
            errorClass: 'has-error',
            highlight: function (element, errorClass, validClass) {
                $(element).closest(".form-group")
                    .removeClass(validClass)
                    .addClass('has-error');
            },
            unhighlight: function (element, errorClass, validClass) {
                $(element).closest(".form-group")
                .removeClass('has-error')
                .addClass(validClass);
            }
        };

        $.validator.setDefaults(defaultOptions);

        $.validator.unobtrusive.options = {
            errorClass: defaultOptions.errorClass,
            validClass: defaultOptions.validClass
        };


        /*--------------------------------------------------------------------------------------------
        Phone Number Mask Validation
        --------------------------------------------------------------------------------------------*/
        $.validator.addMethod('phonemaskvalidation', function (value, element, params) {
            var mask = params.mask;
            var len = mask.length;

            // Is required
            if (value === '') {
                return false;
            }
            
            // Must have same length
            if (value.length != len) {
                return false;
            }

            // Must match mask
            for(var i = 0 ; i < len ; i++){
                if(mask[i]='d' && !$.isNumeric(value[i])) {
                    return false;
                }
                if (mask[i] = '-' && value[i] !== '-') {
                    return false;
                }
            }

            return true;
        }, '');

        $.validator.unobtrusive.adapters.add('phonemaskvalidation', ['mask'], function (options) {
            options.rules['phonemaskvalidation'] = {
                mask: options.params.mask
            };
            options.messages['phonemaskvalidation'] = options.message;
        });


        /*--------------------------------------------------------------------------------------------
        Date Range Validation
        --------------------------------------------------------------------------------------------*/

        /*
        

        $.validator.unobtrusive.adapters.add('phonemaskvalidation', ['mask'], function (options) {
            var params = {
                mask:
            };

            options.rules['phonemaskvalidation'] = params;
            options.messages['phonemaskvalidation'] = options.message;
        });

        
        $.validator.addMethod('daterange',
            function (value, element, param) {
                var dateValue = $.datepicker.parseDate("dd/MM/yyyy", value);
                console.log(dateValue);
                return;
                //var dateValue = null;
                if (!value) {
                    return false; // not testing 'is required' here!
                }
                try {
                    dateValue = $.datepicker.parseDate("dd/MM/yyyy", value);
                    //var dateValue = new Date($("#DOB").val().substr(6));
                }
                catch (e) {
                    return false;
                }
                var start = new Date(param.mindate);
                var end = new Date(param.maxdate);
                return start <= dateValue && end <= param.maxdate;
            });
        
        $.validator.unobtrusive.adapters.add('daterange', ['mindate', 'maxdate'],
function (options) {
    var params = {
        mindate: $.datepicker.parseDate("dd/MM/yyyy", options.params.mindate),
        maxdate: $.datepicker.parseDate("dd/MM/yyyy", options.params.maxdate)
    };

    options.rules['daterange'] = params;
    if (options.message) {
        options.messages['daterange'] = options.message;
    }

});
    */
    })(jQuery);
    </script>    
}

